This codebase is for a Django web application called "Datasage", which appears to be a data analysis and visualization platform with a focus on SQL notebooks and knowledge graph generation.

Here's a breakdown of the key components:
Core Application (core app):

This is the main application containing the core logic.

    Models (models.py): Defines the database structure. Key models include:
        User: Custom user model extending Django's AbstractBaseUser.
        AdminUser, NormalUser: Profiles for different user types.
        DatabaseConnection: Stores database connection details, with encrypted credentials.
        SQLNotebook: Represents a SQL notebook containing multiple cells.
        SQLCell: An individual cell within a SQL notebook, storing a query and its results.
        KnowledgeGraph: Stores database schema knowledge graphs generated from notebooks.
        Thread: Appears to be for user conversations or analysis threads.
    Views (views.py, views_graph.py, views_oauth.py): Handles the application's request-response logic.
        views.py: Contains views for core functionalities like login, signup, home dashboard, data connection hub, workbench, notebook creation/management, cell operations (add, update, execute, delete), and database schema retrieval. It also includes API endpoints for dashboard data handling.
        views_graph.py: Contains API views for generating and retrieving knowledge graphs for notebooks.
        views_oauth.py: Handles OAuth-related signals like user login and social account additions, primarily for messaging.
    Database Handlers (db_handlers.py): Provides functions to execute queries (primarily MySQL, with a placeholder for Redshift) and fetch schema information from MySQL databases. It includes data serialization for types like datetime.
    Encryption (encryption.py): Implements encryption and decryption for sensitive data (like passwords, API keys) using Fernet, deriving keys from environment variables or settings.
    Knowledge Graph (knowledge_graph.py): Contains the KnowledgeGraphGenerator class, which processes MySQL schema information to build a graph of tables, columns, and their relationships. It can then serialize this graph data into a Vis.js compatible format for visualization.
    OAuth Handlers (oauth_handlers.py): Includes a custom MergingSocialAccountAdapter for django-allauth to handle merging email-based accounts with social accounts and populating user fields from social login data.
    Admin (admin.py): Configures the Django admin interface for the custom User, AdminUser, and NormalUser models.
    URLs (urls.py): Defines the URL patterns for the core application, mapping URLs to views for authentication, data connections, notebooks, cells, and API endpoints for knowledge graphs and dashboards.
    Management Commands (update_site_domain.py): A Django management command to update the Site domain, which is important for OAuth redirect URIs.

Project Configuration (rca directory):

This directory contains the main Django project settings and configurations.

    Settings (settings.py): Configures the Django project, including installed apps (core, allauth, mcp_agent, channels), middleware, database connection (loaded from environment variables), static files, authentication backends (including django-allauth for social authentication like Google), and custom user model (core.User). It also loads environment variables from a .env file.
    URLs (urls.py): The main URL configuration for the project, including the admin site, django-allauth URLs, and the core app's URLs.
    __init__.py: Initializes PyMySQL as a MySQLdb replacement.
    asgi.py, wsgi.py: Standard Django files for ASGI and WSGI application setup.

Agent Application (mcp_agent app):

This app appears to be less developed, with mostly placeholder files for models, views, tests, and admin configuration.
Frontend (static and templates directories):

    Static Files (static directory):
        CSS: Contains stylesheets for the dashboard, data connection hub, knowledge graph visualization, login/signup pages, general styling (main.css), SQL notebook interface, and schema explorer. It also includes Django admin-related CSS files.
        JavaScript: Contains client-side logic for:
            app-registry.js: A global registry for cross-script function sharing.
            dashboard.js: Handles dashboard visualization functionality using Plotly.js, including loading data, populating column dropdowns, generating charts, and clearing data.
            knowledge_graph.js: Manages the knowledge graph visualization using Vis.js, including fetching/generating graph data, rendering the network, and handling search/layout options.
            login.js: Adds password visibility toggle and basic form validation to the login/signup pages.
            notebook.js: Core client-side logic for the SQL notebook, handling cell creation, CodeMirror editor initialization, cell execution, result display, and communication with the backend API for saving and updating notebook/cell content. It also handles exporting cell data to the dashboard.
            schema_explorer.js: Fetches and renders database schema information in the workbench sidebar, allowing users to explore tables and their columns.
            It also includes various Django admin JavaScript files and vendor libraries like jQuery, Select2, and XRegExp.
    Templates (templates directory):
        auth/login.html, auth/signup.html: HTML templates for the login and signup pages, including Google OAuth options.
        base.html: A base template likely used by other pages, including common CSS and JS libraries like Font Awesome, Google Fonts, Vis.js, Vue.js, and TanStack Table.
        data_connection_hub.html: Template for the data connection page, allowing users to connect to various data sources (Redshift, Snowflake, MySQL, Excel, CSV, S3).
        home.html: The main dashboard/homepage after login, showing cards for connecting to a database, the "Trainer Dashboard", and documentation, along with a list of the user's notebooks.
        workbench.html: The main interface for working with SQL notebooks. It includes a schema browser sidebar, a tabbed workspace for SQL Notebook, Results (including Knowledge Graph), Dashboard (visualizations), and Documentation.

Other Files:

    manage.py: The standard Django command-line utility.
    requirements.txt: Lists Python package dependencies, including Django, django-allauth, mysql-connector-python, psycopg2 (for Redshift, though implementation is a placeholder), cryptography, and various libraries for data handling, API development, and UI components.
    update_google_auth.sh: A shell script to help with Google OAuth setup by making migrations and updating the site domain for local development.
    steps.txt: Appears to be a development notes file outlining features, to-dos, and important deployment considerations.

Key Features & Functionality:

    User Authentication: Supports standard email/password login/signup and Google OAuth2.
    Database Connectivity: Allows users to connect to various databases (MySQL is primary, Redshift planned) and stores connection credentials securely (encrypted).
    SQL Notebooks: Provides a workbench interface for users to create and manage SQL notebooks. Users can add, edit, execute, and delete SQL cells within these notebooks. Cell results can be viewed.
    Schema Exploration: Users can explore the schema of their connected database within the workbench.
    Knowledge Graph Visualization: The application can generate and display a knowledge graph of the database schema, showing tables, columns, and their relationships using Vis.js.
    Dashboarding/Visualization: Query results can be exported to a dashboard tab where users can generate various chart types (bar, line, scatter, pie, histogram) using Plotly.js.
    Natural Language to SQL (Planned/Implied): The UI includes an input for "Describe your query in natural language..." and example prompts, suggesting a feature for NL-to-SQL translation is intended or under development.
    File Uploads (Planned): The data connection hub includes options for Excel and CSV file uploads, though the backend validation for these seems to be a placeholder in views.py.

In summary, the project is a fairly comprehensive web-based SQL analysis tool with features for notebook-style querying, data visualization, and schema understanding through knowledge graphs. It's built with Django and utilizes several JavaScript libraries for frontend interactivity.